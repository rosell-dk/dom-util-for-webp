name: Code coverage

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.2
        coverage: xdebug  # PS: Use "xdebug2" for PHP 7.2-7.4, otherwise "xdebug"
        extensions: mbstring

    - name: Validate composer.json
      run: composer validate --strict

    - name: Create composer.lock for cache key (this is a library, so composer.lock is not part of repo)
      run: composer update --no-install

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          php-${{ hashFiles('**/composer.lock') }}
          php-

    - name: Composer install
      run: composer install --prefer-dist --no-progress

    - name: Run phpunit (test cases)
      run: composer run-script test

    - name: Create coverage badge json
      run: |
        # Extract total coverage
        COVERAGE=$(grep -oP -m 1 'Lines:\s*\K[0-9.%]+' build/coverage.txt)

        # Set COLOR based on COVERAGE
        # 0-49%: red, 50%-69%: orange, 70%-80%: yellow, 90%-100%: brightgreen
        if grep -oP '(^9\d.)|(^100.)' <<< "$COVERAGE" > /dev/null; then COLOR=brightgreen; elif grep -oP '[87]\d.' <<< "$COVERAGE" > /dev/null; then COLOR=yellow; elif grep -oP '[65]\d.' <<< "$COVERAGE" > /dev/null; then COLOR=orange; else COLOR=red; fi;

        # Generate bagde json
        echo \{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"$COVERAGE\",\"color\":\"$COLOR\"\} | tee build/coverage-badge.json

        # PS: If we needed COVERAGE elsewhere, we could store in ENV like this:
        # echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

    - name: Install SSH Key (for deployment of code coverage)
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.DEPLOY_KEY }}
        known_hosts: ${{ secrets.DEPLOY_KNOWN_HOSTS }}

    - name: Upload code coverage report
      run: |
        sh -c "rsync -rtog --chown :www-data $GITHUB_WORKSPACE/build/ $DEPLOY_DESTINATION --delete"
      env:
        DEPLOY_DESTINATION: ${{ secrets.DEPLOY_DESTINATION }}
